// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// stepOne
Rcpp::List stepOne(bool findIn, int p, int n, double sigma, double tolerance, std::string Ftrace, std::string criteria, const Eigen::MatrixXd& Y, const Eigen::MatrixXd& X1, const Eigen::MatrixXd& X0, int k, double SST);
RcppExport SEXP _QWDAP_stepOne(SEXP findInSEXP, SEXP pSEXP, SEXP nSEXP, SEXP sigmaSEXP, SEXP toleranceSEXP, SEXP FtraceSEXP, SEXP criteriaSEXP, SEXP YSEXP, SEXP X1SEXP, SEXP X0SEXP, SEXP kSEXP, SEXP SSTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type findIn(findInSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< std::string >::type Ftrace(FtraceSEXP);
    Rcpp::traits::input_parameter< std::string >::type criteria(criteriaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type SST(SSTSEXP);
    rcpp_result_gen = Rcpp::wrap(stepOne(findIn, p, n, sigma, tolerance, Ftrace, criteria, Y, X1, X0, k, SST));
    return rcpp_result_gen;
END_RCPP
}
// qwalkRcpp
Rcpp::NumericMatrix qwalkRcpp(Rcpp::NumericMatrix edges, int startindex, int lens, Rcpp::NumericVector scals, int flag, int getfloat, int multiple);
RcppExport SEXP _QWDAP_qwalkRcpp(SEXP edgesSEXP, SEXP startindexSEXP, SEXP lensSEXP, SEXP scalsSEXP, SEXP flagSEXP, SEXP getfloatSEXP, SEXP multipleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type edges(edgesSEXP);
    Rcpp::traits::input_parameter< int >::type startindex(startindexSEXP);
    Rcpp::traits::input_parameter< int >::type lens(lensSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type scals(scalsSEXP);
    Rcpp::traits::input_parameter< int >::type flag(flagSEXP);
    Rcpp::traits::input_parameter< int >::type getfloat(getfloatSEXP);
    Rcpp::traits::input_parameter< int >::type multiple(multipleSEXP);
    rcpp_result_gen = Rcpp::wrap(qwalkRcpp(edges, startindex, lens, scals, flag, getfloat, multiple));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_QWDAP_stepOne", (DL_FUNC) &_QWDAP_stepOne, 12},
    {"_QWDAP_qwalkRcpp", (DL_FUNC) &_QWDAP_qwalkRcpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_QWDAP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
